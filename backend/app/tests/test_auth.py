import pytest
from unittest.mock import AsyncMock, MagicMock, Mock
from app.services.user_service import register_user, authenticate_user
from app.schemas.user import UserCreate
from app.schemas.auth import UserAuthForm
from app.db.models.user import User
from app.core.interfaces import PasswordHasher, TokenService


# –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ
class DummyHasher(PasswordHasher):
    def hash(self, password: str) -> str:
        return f"hashed-{password}"
    
    def verify(self, plain: str, hashed: str) -> bool:
        return plain == "correct_password" and hashed == "hashed_password"


class DummyTokenService(TokenService):
    def create_token(self, data: dict) -> str:
        return "mocked_token"


@pytest.mark.asyncio
async def test_register_user_success():
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫ —Å–µ—Å—Å–∏–∏
    mock_session = AsyncMock()

    # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–µ–ø–æ—á–∫–∞:
    # db.execute(...) ‚Üí result ‚Üí result.scalars() ‚Üí first()
    # –ù–∞–º –Ω—É–∂–Ω–æ —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç .execute()
    mock_execute_result = Mock()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç .scalars()
    mock_scalars = Mock()
    mock_scalars.first.return_value = None  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º .scalars() –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    mock_execute_result.scalars.return_value = mock_scalars
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º .execute() –∫ —Å–µ—Å—Å–∏–∏
    mock_session.execute.return_value = mock_execute_result

    # –í–ê–ñ–ù–û: .add() ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω—É–∂–Ω–æ –º–æ–∫–∞—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Mock
    mock_session.add = Mock()

    # .commit() –∏ .refresh() ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –º–æ–∫–∞–µ–º —á–µ—Ä–µ–∑ AsyncMock
    mock_session.commit = AsyncMock()
    mock_session.refresh = AsyncMock()

    # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = UserCreate(email="test@example.com", password="secret")
    hasher = DummyHasher()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    result = await register_user(user_data, mock_session, hasher)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    assert result == {"msg": "User created successfully."}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é
    mock_session.add.assert_called()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
    mock_session.commit.assert_awaited()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ –ë–î
    mock_session.refresh.assert_awaited()


@pytest.mark.asyncio
async def test_authenticate_user_success():
    # üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (Arrange)

    # 1. –ú–æ–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    mock_session = AsyncMock()

    # 2. –ú–æ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç .execute()
    mock_execute_result = Mock()

    # 3. –ú–æ–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ .scalar()
    mock_user = Mock(spec=User)
    mock_user.email = "test@example.com"
    mock_user.hashed_password = "hashed_password"

    mock_execute_result.scalar.return_value = mock_user
    mock_session.execute.return_value = mock_execute_result

    # 4. –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    form_data = UserAuthForm(email="test@example.com", password="correct_password")

    # 5. –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    hasher = DummyHasher()
    token_service = DummyTokenService()

    # üß™ –î–µ–π—Å—Ç–≤–∏–µ (Act)
    result = await authenticate_user(form_data, mock_session, hasher, token_service)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ (Assert)
    assert result == {
        "access_token": "mocked_token",
        "token_type": "bearer"
    }